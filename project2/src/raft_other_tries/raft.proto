//specify the proto version
syntax = "proto3";
//the name(or empty)
package raft;

service RaftServer {
    rpc chatFunction(ChatInput) returns (ChatOutput) {}
    rpc getMessages(ChatInput) returns (stream ChatMessage) {}
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    // these next two RPCs are sent from client to the leader
    rpc ClientAppend(ClientAppendRequest) returns (ClientAppendResponse);
    rpc ClientRequestIndex(ClientRequestIndexRequest) returns (ClientRequestIndexResponse);
}

message ChatInput {
    //type 1: login, 2: join, 3: chat, 4: like, 5: dislike, 6: history
    string userName = 1;
    string groupName = 2;
    int32 type = 3;
    string message = 4;
    int32 messageId = 5;
    string uuid = 6;
}

message ChatOutput {
    string status = 1;
    repeated ChatMessage messages = 2;
    repeated string user = 3;
}

message ChatMessage{
    int32 id = 1;
    string user = 2;
    string content = 3;
    int32 numberOfLikes = 4;
}

message Empty{

}

message RequestVoteRequest {
    int32 term = 1;
    int32 candidateId = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message RequestVoteResponse {
    int32 term = 1;
    bool voteGranted = 2;
}

message AppendEntriesRequest {
    int32 term = 1;
    int32 leaderId = 2;
    int32 prevLogIndex = 3;
    int32 prevLogTerm = 4;
    Entry entry = 5;
    int32 leaderCommit = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
}

message Entry {
    int32 term = 1;
    int32 index = 2;
    ChatInput request = 3;
}

message ClientAppendRequest {
    int32 type = 1;
    string value = 2;
}

message ClientAppendResponse {
    int32 rc = 1; // 0 means success, 1 means not the leader
    int32 leader = 2;
    int32 index = 3;
}

message ClientRequestIndexRequest {
    int32 index = 1;
}

message ClientRequestIndexResponse {
    int32 rc = 1; // 0 means success, 1 means not the leader
    int32 leader = 2;
    // this will be the requested index or the last committed
    // index if the requested index is not found
    int32 index = 3;
    string decree =4;
}