
//specify the proto version
syntax = "proto3";
//the name(or empty)
package raftMessage;

service raftMessage {
    rpc requestVote(RequestVoteArgs) returns (RequestVoteReply) {}
    rpc appendEntries(AppendEntriesArgs) returns (AppendEntriesReply) {}
}

message RequestVoteArgs{
    int32 term = 1; //candidate's term
    int32 candidateId = 2; //candidate requesting vote
    int32 lastLogIndex = 3;// index of candidate's last log entry
    int32 lastLogTerm = 4; //term of candidate's last log entry
}
message RequestVoteReply{
    int32 id = 1; //id of the follower
    int32 term = 2; //current term, for candidate to update itself
    bool voteGranted = 3; //true means candidate received vote
}

message AppendEntriesArgs{
    int32 term = 1; //leader's term
    int32 leaderId = 2; //so follower can redirect clients
    int32 prevLogIndex = 3; //index of log entry immediately preceding new ones
    int32 prevLogTerm = 4; //term of prevLogIndex entry
    repeated LogEntry entries = 5; //log entries to store(empty for heartbeat; may send more than one for efficiency)
    int32 leaderCommit = 6; //leader's commitIndex
}

message AppendEntriesReply{
    int32 id = 1; //id of the follower
    int32 term = 2; //current term, for leader to update itself
    bool success = 3; //true if follower contained entry matching prevLogIndex and prevLogTerm
}

message LogEntry{
    int32 term = 1; //term when entry was received by leader(first index is 1)
    string command = 2; //command for state machine
}