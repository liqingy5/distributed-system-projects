# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import group_chat_pb2 as group__chat__pb2


class ChatServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.chatFunction = channel.unary_unary(
                '/groupChat.ChatServer/chatFunction',
                request_serializer=group__chat__pb2.ChatInput.SerializeToString,
                response_deserializer=group__chat__pb2.ChatOutput.FromString,
                )
        self.getMessages = channel.unary_stream(
                '/groupChat.ChatServer/getMessages',
                request_serializer=group__chat__pb2.ChatInput.SerializeToString,
                response_deserializer=group__chat__pb2.ChatMessage.FromString,
                )
        self.syncMessage = channel.unary_unary(
                '/groupChat.ChatServer/syncMessage',
                request_serializer=group__chat__pb2.ChatServerSyncRequest.SerializeToString,
                response_deserializer=group__chat__pb2.ChatServerSyncResponse.FromString,
                )
        self.sendMessage = channel.unary_unary(
                '/groupChat.ChatServer/sendMessage',
                request_serializer=group__chat__pb2.ChatServerRequest.SerializeToString,
                response_deserializer=group__chat__pb2.ChatServerResponse.FromString,
                )
        self.probe = channel.unary_unary(
                '/groupChat.ChatServer/probe',
                request_serializer=group__chat__pb2.Empty.SerializeToString,
                response_deserializer=group__chat__pb2.Empty.FromString,
                )


class ChatServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def chatFunction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def syncMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def probe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'chatFunction': grpc.unary_unary_rpc_method_handler(
                    servicer.chatFunction,
                    request_deserializer=group__chat__pb2.ChatInput.FromString,
                    response_serializer=group__chat__pb2.ChatOutput.SerializeToString,
            ),
            'getMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.getMessages,
                    request_deserializer=group__chat__pb2.ChatInput.FromString,
                    response_serializer=group__chat__pb2.ChatMessage.SerializeToString,
            ),
            'syncMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.syncMessage,
                    request_deserializer=group__chat__pb2.ChatServerSyncRequest.FromString,
                    response_serializer=group__chat__pb2.ChatServerSyncResponse.SerializeToString,
            ),
            'sendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.sendMessage,
                    request_deserializer=group__chat__pb2.ChatServerRequest.FromString,
                    response_serializer=group__chat__pb2.ChatServerResponse.SerializeToString,
            ),
            'probe': grpc.unary_unary_rpc_method_handler(
                    servicer.probe,
                    request_deserializer=group__chat__pb2.Empty.FromString,
                    response_serializer=group__chat__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'groupChat.ChatServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def chatFunction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groupChat.ChatServer/chatFunction',
            group__chat__pb2.ChatInput.SerializeToString,
            group__chat__pb2.ChatOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/groupChat.ChatServer/getMessages',
            group__chat__pb2.ChatInput.SerializeToString,
            group__chat__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def syncMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groupChat.ChatServer/syncMessage',
            group__chat__pb2.ChatServerSyncRequest.SerializeToString,
            group__chat__pb2.ChatServerSyncResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groupChat.ChatServer/sendMessage',
            group__chat__pb2.ChatServerRequest.SerializeToString,
            group__chat__pb2.ChatServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def probe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groupChat.ChatServer/probe',
            group__chat__pb2.Empty.SerializeToString,
            group__chat__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
